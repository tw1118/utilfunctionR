data[, list(MaxTransactionQuantityDate = TransactionDate[which.max(Quant)], MaxQuantity = max(Quant)), by = UserID]
#
data[. list(data = .N), by = list(UserID, TransactionYear = year(TransactionDate))]
#
data[. list(data = .N), by = list(UserID, TransactionYear = year(TransactionDate))]
#
data[, list(data = .N), by = list(UserID, TransactionYear = year(TransactionDate))]
#
data[, list(data = .N), by = list(UserID, TransactionYear = year(TransactionDate))[, list(Users = .N), by = TransactionYear]]
#
data[, list(data = .N), by = list(UserID, TransactionYear = year(TransactionDate))[, list(Users = .N), by = TransactionYear]]
#
data[, list(data = .N), by = list(UserID, TransactionYear = year(TransactionDate))][, list(Users = .N), by = TransactionYear]
data[, UserTransactions := .N, by = UserID]
data
# Inserting columns in transactions indicating first transaction date and last transaction date
data[, `:=`(FirsttransactionDate = min(TransactionDate), LastTransactionDate = max(TransactionDate))]
data
# Inserting columns in transactions indicating first transaction date and last transaction date
data[, `:=`(FirsttransactionDate = min(TransactionDate), LastTransactionDate = max(TransactionDate)), by = UserId]
# Inserting columns in transactions indicating first transaction date and last transaction date
data[, `:=`(FirsttransactionDate = min(TransactionDate), LastTransactionDate = max(TransactionDate)), by = UserID]
head(data)
#
setorder(data, "UserID"")
#
setorder(data, "UserID")
#
setorder(data, "UserID")
data
#
setorder(data, "UserID", "TransactionDate")
data
#
setorder(data, "UserID", -"TransactionDate")
data
#
setorder(data, "UserID", "TransactionDate")
as.Date(NA)
data[, PrevtransactionDate := c(as.Date(NA), head(TransactionDate, -1)), by = UserID]
head(data)
getwd()
path <- "C:/Users/taeha/Documents/Recipe/Data_Wrangling/"
paste(path, "transactions.csv")
paste0(path, "transactions.csv")
a <- paste0(path, "transactions.csv")
user <- fread(a)
a <- paste0(path, "transactions.csv")
a
user <- fread(a)
a
a <- paste0(path, "transactions.csv/")
a
user <- fread(a)
user <- fread("../data/transactions.csv")
user <- fread("./data/transactions.csv")
user <- fread("~/data/transactions.csv")
user <- fread("data/transactions.csv")
user <- fread("data/products.csv")
list.files(path = "test", pattern = ".csv", full.names = TRUE)
users <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/users.csv")
sessions <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/sessions.csv")
products <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/products.csv")
transactions <- transactions <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/transactions.csv")
transactions <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/transactions.csv")
# Left Join
str(users)
# Left Join
names(users)
# Left Join
names(users); names(transactions)
users[transactions, on = "UserID"]
head(users[transactions, on = "UserID"])
head(users[!transactions, on = "UserID"])
users[transactions, on = "UserID"]
users
transactions
users
transactions
# finding out which userids in users table is not on transactions
head(users[!transactions, on = "UserID"])
# Inner Join
users[transactions, on = "UserID", nomatch = 0]
# Inner Join
head(users[transactions, on = "UserID", nomatch = 0])
# Full Outer Join
merge(users, transactions, by = "UserID", all = TRUE)
# Full Outer Join
head(merge(users, transactions, by = "UserID", all = TRUE))
# Full Outer Join
head(merge(users, transactions, by = "UserID", all = TRUE),3)
# Full Outer Join
head(merge(users, transactions, by = "UserID", all = TRUE))
# Problem:determine which sessions occured on the same day each user registered
users[sessions, on = c("UserID", "Reistered" = "SessionDate")]
# Problem:determine which sessions occured on the same day each user registered
users[sessions, on = c("UserID", "Reistered" = "SessionDate"), nomatch = 0]
# Problem:determine which sessions occured on the same day each user registered
users[sessions, on = c("UserID", "Registered" = "SessionDate"), nomatch = 0]
# Cross join
data.table::CJ(UserID = users$UserID, ProjuctID = products$ProductID)
# Problem: Determine how much quantity of each product was purchased by each user
transactions[, list(Quantity = sum(Quantity)), by = list(UserID, ProductID)][CJ(UserID = users$UserID, ProductID = products$ProductID), on = c("UserID", "ProductID")]
tb1 <- transactions[, list(UserID, TransactionID1 = TransactionID)]
tb1
tb2 <- transactions[, list(UserID, TransactionID2 = TransactionID)]
tb1[tb2, on = "UserID", allow.cartesian = TRUE]
transactions[users, on = "UserID", mult = "first"]
transactions[users, on = "UserID"]
transactions[users, on = "UserID", mult = "first"]
# Rolling Joins
# Determine the ID of the last session which occured prior to the date of each transaction per user
sessions[, RollDate := SessionDate]
transacitons[, RollDate := TransactionDate]
transactions[, RollDate := TransactionDate]
# Rolling Joins
# Determine the ID of the last session which occured prior to the date of each transaction per user
head(sessions[, RollDate := SessionDate])
setkey(sessions, "UserID", "RollDate")
setkey(transactions, "UserID", "RollDate")
sessions[transactions, roll = TRUE]
sessions
users
sessions[transactions, roll = TRUE]
sessions[transactions, roll = TRUE]
transactions[users, on = list(UserID, TransactionDate <= Cancelled), mult = "first"]
transactions[users, on = list(UserID, TransactionDate <= Cancelled), mult = "first"]
setorder(transactions, "TransactiondDate")
# Nonequi Join
# Determine the first transaction that occured for each user prior to his/her cancelled date
transactions
setorder(transactions, "TransactionDate")
transactions[users, on = list(UserID, TransactionDate <= Cancelled), mult = "first"]
setorder(transactions, "TransactionDate")
transactions[users, on = list(UserID, TransactionDate <= Cancelled), mult = "first"]
transactions[users, on = list(UserID, TransactionDate < Cancelled), mult = "first"]
transactions[users, on =.(UserID, TransactionDate < Cancelled), mult = "first"]
transactions[users, on =list(UserID, TransactionDate < Cancelled), mult = "first"]
transactions[users, on =list(UserID), mult = "first"]
# Importing data (% data is taken from here)
users <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/users.csv")
sessions <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/sessions.csv")
products <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/products.csv")
transactions <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/transactions.csv")
setorder(transactions, "TransactionDate")
transactions[users, on =list(UserID), mult = "first"]
transactions[users, on =list(UserID, Cancelled < TransactionDate), mult = "first"]
users
transactions[users, on =list(UserID, Cancelled < TransactionDate), mult = "first"]
transactions[users, on =list(UserID, TransactionDate < Cancelled), mult = "first"]
users[transactions, on=list(UserID, Cancelled < TransactionDate), nomatch=0]
# Join and Update
# Inserting the Price of each Product in the Transaction dataset
transactions[products, ProductPrice := Price, on = "ProductID"]
head(transactions)
# Inserting the number of transactions each user made into the users data set
users[transactions, on = "UserID", Transactions := .N, by = UserID]
head(users)
# Read datasets from CSV
users <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/users.csv")
transactions <- transactions <- fread("https://raw.githubusercontent.com/ben519/DataWrangling/master/Data/transactions.csv")
# Convert date columns to Date type
users[, `:=`(Registered = as.Date(Registered), Cancelled = as.Date(Cancelled))]
transactions[, TransactionDate := as.Date(TransactionDate)]
transactions
# Add column TransactionWeekday as a factor with levels Sunday through Saturday
transactions[, TransactionWeekday := factor(weekdays(TransactionDate), levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))]
transactions
# Wide Format (making a column values to columns aka One Hot endocing)
??gather
library(tidyr)
# Wide Format (making a column values to columns aka One Hot endocing)
library(dplyr)
transactions
head(transactions)
tidyr::spread
# Wide Format (making a column values to columns aka One Hot endocing)
library(dplyr);library(tidyr)
library(tidyr)
# Wide Format (making a column values to columns aka One Hot endocing)
library(dplyr)
install.packages("tidyr")
# Wide Format (making a column values to columns aka One Hot endocing)
library(dplyr);library(tidyr)
library(tidyr)
install.packages("tidyr")
library(tidyr)
library(tidyr)
.libPaths()
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
install.packages("purrr")
library(tidyr)
library(purrr)
install.packages("purrr")
install.packages("tidyr")
library(purrr)
library(tidyr)
install.packages("tidyr")
library(tidyr)
library(tidyr)
install.packages("tidyr")
library(tidyr)
install.packages("tidyr")
install.packages("tidyr", destdir = "C:\Users\taeha\Documents\R\win-library\3.4")
install.packages("tidyr", destdir = "C:\Users\taeha\Documents\R\win-library\3.4\")
install.packages("tidyr", destdir = "\Users\taeha\Documents\R\win-library\3.4\")
?install.packages
.libPaths()
install.packages("tidyr", lib ="C:/Users/taeha/Documents/R/win-library/3.4")
sessionInfo(package = "tidyr")
trace(utills:::tidyr, edit = TRUE)
trace(utils:::tidyr, edit = TRUE)
?trace
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
library(ggplot2)
library(ggplot2movies)
??ggplot2movies::
??ggplot2movies
?ggplot2movies
install.packages("ggplot2")
library(ggplot2)
installed.packages()
# pca <- function(DT) {
#   if (!as.data.table(DT)) {
#     try {}
#     print(try(log("a"), TRUE))
#   }
# }
#
# print(try(log("a"), TRUE))
# class(try(log("a"))) == "try-error"
getOption()
# pca <- function(DT) {
#   if (!as.data.table(DT)) {
#     try {}
#     print(try(log("a"), TRUE))
#   }
# }
#
# print(try(log("a"), TRUE))
# class(try(log("a"))) == "try-error"
??getOption()
# pca <- function(DT) {
#   if (!as.data.table(DT)) {
#     try {}
#     print(try(log("a"), TRUE))
#   }
# }
#
# print(try(log("a"), TRUE))
# class(try(log("a"))) == "try-error"
?getOption()
?nearZeroVar
??nearZeroVar
devtools::install_github("https://github.com/topepo/caret/")
?suppressMessage
??suppressMessage
DT <- as.data.table(feather::feather('C:/Users/taeha/Box Sync/ToShareWithCollaborators/AAteam/ProjectSAS/TaeHa/AttritionData/Raw/rawData.feather'))
library(data.table)
DT <- as.data.table(feather::feather('C:/Users/taeha/Box Sync/ToShareWithCollaborators/AAteam/ProjectSAS/TaeHa/AttritionData/Raw/rawData.feather'))
sapply(DT, class)
lappy(sapply(DT, class), is.numeric|is.integer)
lapply(sapply(DT, class), is.numeric|is.integer)
type <- sapply(DT, class)
type
integer <- type == "integer"
integer
numeric <- type == "numeric"
numeric
char
char <- !integer & !numeric
char
nuTot <- integer | numeric
dfnum <- data.table::copy(DT[, nuTot, with = FALSE])
dfnum
dfchar <- data.table::copy(DT[, !nuTot, with = FALSE])
dfchar
?same
?duplicate
duplicate
unique.data.table
??unique.data.table
sapply(DT, unique)
unique(x) == 1
sapply(DT, function(x) {
unique(x) == 1
}
)
sapply
??sapply
?sapply
sapply(DT, function(x) {
length(unique(x)) == 1
}
)
res <- sapply(DT, function(x) {
length(unique(x)) == 1
}
)
class(res)
#library(data.table)
#DT <- as.data.table(feather::feather('C:/Users/taeha/Box Sync/ToShareWithCollaborators/AAteam/ProjectSAS/TaeHa/AttritionData/Raw/rawData.feather'))
zeroVar <- function(DT) {
# This function takes a data table and finds both numeric and character predictors
# that have only one value (zero variance predictors)
# Input : Data table
# Output : logical vector indicating which columnn(s) has one value for all
require(dplyr);require(data.table)
res <- sapply(DT, function(x) {
length(unique(x)) == 1
}
)
return(res)
}
?
?corr
?corrplot
??corrplot
?melt
require(c(ggplot2, data.table))
pkg <- c("ggplot2", "data.table")
require(pkg)
pkg <- c("ggplot2", "data.table")
require(pkg)
pkg <- c("ggplot2", "data.table")
require(ggplot2);require(data.table)
find.package("devtools")
find.package("Rtools")
library(devtools)
find_rtools()
devtools::find_rtools()
library(digest)
devtools::find_rtools()
require(digest)
devtools::find_rtools()
Sys.getenv("PATH")
df <- data.table::fread("C:/Users/taeha/Box Sync/ToShareWithCollaborators/AAteam/ProjectSAS/TaeHa/AttritionData/Raw/WA_Fn-UseC_-HR-Employee-Attrition.csv")
View(df)
length(unique(df$EmployeeNumber))
View(df)
library(data.table)
DT <- as.data.table(feather::feather('C:/Users/taeha/Box Sync/ToShareWithCollaborators/AAteam/ProjectSAS/TaeHa/AttritionData/Raw/rawData.feather'))
findUniqueKey <- function(DT) {
# this function takes in data table and return boolean values of
# predictor(s) that contains unique key.
# ex) customer id in customer data table.
require(dplyr);require(data.table)
res <- sapply(DT, function(x) {
length(unique(x)) == nrow(DT)
}
)
return(res)
}
findUniqueKey(DT)
findUniqueKey(DT)
df
sample(100, df)
sample(df, 100)
sample(df, 5)
DT
numCol <- sapply(DT[sample(1:nrow(DT), 100)], is.numeric())
numCol <- sapply(DT[sample(1:nrow(DT), 100)], is.numeric
# things to do
# 1 get numeric data
# 2 sample with replacement
# for each cluster data table
# perform k means, mclust, hclust
# add cluster and distance to center
# combine all data frames
# result
}
numCol <- sapply(DT[sample(1:nrow(DT), 100)], is.numeric)
numCol
DT <- DT[, numCol, with = FALSE]
DT
set.seed(1001)
sample(DT, 5, replace = FALSE)
names(sample(DT, 5, replace = FALSE))
names(sample(DT, 5, replace = FALSE))
names(sample(DT, 5, replace = FALSE))
names(sample(DT, 5, replace = FALSE))
set.seed(1001)
names(sample(DT, 5, replace = FALSE))
set.seed(1001)
names(sample(DT, 5, replace = FALSE))
set.seed(1001)
names(sample(DT, 5, replace = FALSE))
colnames(DT)
colName <- colnames(DT)
tmpCol <- sample(colName, predInClust, replace = FALSE)
predInClust = 5
tmpCol <- sample(colName, predInClust, replace = FALSE)
tmpCol
tmpCol <- sample(colName, predInClust, replace = FALSE)
tmpCol
colName[colName == tmpCol]
colName[colName %iN% tmpCol]
colName[colName %in% tmpCol]
tmpCol
colName[colName %in% !tmpCol]
colName[!colName %in% tmpCol]
colName <- colName[!colName %in% tmpCol]
tmpCol <- sample(colName, predInClust, replace = FALSE)
tmpCol
tmpCo
colName <- colName[!colName %in% tmpCol]
tmpCol <- sample(colName, predInClust, replace = FALSE)
tmpCo
colName <- colName[!colName %in% tmpCol]
tmpCol <- sample(colName, predInClust, replace = FALSE)
tmpCol
colName <- colName[!colName %in% tmpCol]
tmpCol <- sample(colName, predInClust, replace = FALSE)
tmpCol
colName <- colName[!colName %in% tmpCol]
tmpCol <- sample(colName, predInClust, replace = FALSE)
tmpCol
colName <- colName[!colName %in% tmpCol]
tmpCol <- sample(colName, predInClust, replace = FALSE)
tmpCol
colName <- colName[!colName %in% tmpCol]
colName
is.na(colName) | length(colName) < predInClust
!is.na(colName) | length(colName) > predInClust
length(colName) > predInClust
!is.na(colName)
!is.na(colName) | length(colName) > predInClust
colName <- colnames(DT)
tmpCol <- sample(colName, predInClust, replace = FALSE)
tmpCol
colName <- colName[!colName %in% tmpCol]
colName
dt1 <- DT[, tmpCol, with = FALSE]
dt1
install.packages("fpc")
library(fpc)
?pamk
pamk.best <- pamk(scale(dt1))
pamk.best
pamk.best$nc
# testing how many cluster is needed for the dataset
clusterNum <- pamk(scale(dt1))$nc
pamk.best
pamk.best$crit
pamk.best$pamobject
pamk.best$pamobject$clustering
clusterCenter <- pamk.best$pamobject$medoids
clusterCenter
clusterCenter <- pamk.best$pamobject$clusinfo
pamk.best
pamk.best$pamobject$id.med
pamk.best$pamobject$clustering
pamk.best$pamobject$objective
pamk.best$pamobject$isolation
pamk.best$pamobject$clusinfo
data <- read.delim("~/Documents")
getwd(
)
data <- read.delim("Wallet_Data_test_Q4FY17.txt")
data
View(data)
View(data)
data <- read.delim("Wallet_Data_test_Q4FY17.txt", sep = ",")
data
View(data)
data <- read.delim("Wallet_Data_test_Q4FY17.txt", sep = "|")
data
View(data)
View(data)
install.packages("devtools")
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("devtools")
install.packages("roxygen2")
devtools::create("myfirstpackage")
setwd("rpackage/")
create("util")
library(devtools)
create("util")
setwd("./util")
document()
setwd("..")
install(util)
install("util")
?cat_function
devtools::install_github("tw1118/utilfunctionR")
devtools::install_github("tw1118/utilfunctionR/util")
library(util)
util::cat_function
library(util)
?util
??util
util::
??util::
?util::
devtools::install_github("tw1118/utilfunctionR/tree/master/util")
devtools::install_github("tw1118/utilfunctionR/util")
devtools::install_github("tw1118/utilfunctionR/util", force = TRUE)
devtools::install_github("util", "tw1118")
devtools::install_github("util", "tw1118/util")
util::
install_github("tw1118/utilfunctionR", subdir="util")
util::
install_github("tw1118/utilfunctionR", subdir="util", force = TRUE)
cat_function
util::cat_function
library(util)
